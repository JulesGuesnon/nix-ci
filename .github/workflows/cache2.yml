name: Cache 2

on:
  push:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Record global start
        run: |
          echo "GLOBAL_START=$(date +%s)" >> $GITHUB_ENV

      - name: Install nix
        uses: nixbuild/nix-quick-install-action@v30
        with:
          nix_conf: |
            keep-env-derivations = true
            keep-outputs = true

      - name: Restore and save Nix store
        uses: nix-community/cache-nix-action@v6
        with:
          # restore and save a cache using this key
          primary-key: nix-${{ runner.os }}-${{ hashFiles('flake.nix', 'flake.lock') }}
          # if there's no cache hit, restore a cache by this prefix
          restore-prefixes-first-match: nix-${{ runner.os }}-
          # collect garbage until the Nix store size (in bytes) is at most this number
          # before trying to save a new cache
          # 1G = 1073741824
          gc-max-store-size-linux: 1G
          # do purge caches
          purge: true
          # purge all versions of the cache
          purge-prefixes: nix-${{ runner.os }}-
          # created more than this number of seconds ago
          purge-created: 0
          # or, last accessed more than this number of seconds ago
          # relative to the start of the `Post Restore and save Nix store` phase
          purge-last-accessed: 0
          # except any version with the key that is the same as the `primary-key`
          purge-primary-key: never

      - name: Inject env
        shell: bash
        run: |
          time nix develop -c env | grep -E 'JAVA|PYTHON|NODE|PATH' >> $GITHUB_ENV

      - name: Print env
        shell: bash
        run: |
          global_end=$(date +%s)

          total=$((global_end - GLOBAL_START))

          echo "Total time from before install to after export: ${total} seconds"

      - name: Set uv cache dir
        run: echo "UV_CACHE_DIR=$GITHUB_WORKSPACE/.uv-cache" >> $GITHUB_ENV

      - name: Restore uv cache
        uses: actions/cache@v4
        with:
          path: ${{ env.UV_CACHE_DIR }}
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-

      - name: Prune cache
        uses: ./.github/actions/uv-cache-prune

      - name: Restore Yarn cache
        uses: actions/cache@v4
        with:
          path: ~/.yarn
          key: yarn-${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-${{ runner.os }}-

      - name: Uv sync
        run: uv sync --locked --all-extras

      - name: Install dependencies
        run: yarn install --frozen-lockfile
